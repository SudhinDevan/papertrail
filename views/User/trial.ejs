const checkout = async (req, res)=>{
try {
const userId = req.session.user_id;
const {
payment,
address,
couponId,
payment_id,
} = req.body;

const cart = await cartModel.findOne({userId: userId});

const orderItemIdList = Promise.all(cart.items.map(async (item)=>{
const product = await productModel.findOne({_id: item.productId});
const newItem = new orderItemModel({
product: item.productId,
quantity: item.quantity,
productPrice: product.price,
})

const newOrderItem = await newItem.save();
return newOrderItem._id;
}))

const items = await orderItemIdList;

let newOrder = orderModel({
user: userId,
address: address,
items: items,
price: cart.cartPrice,
payment_status: false,
payment_method: payment,
});

if(payment == "wallet"){
const wallet = await walletModel.findOne({user: userId});

if(!wallet){
res.json({wallet: "false"});
return;
}

let cartTotalPrice = cart.cartPrice;

if(couponId){
const coupon = await couponModel.findOne({_id: couponId});
if(wallet.balance < (cartTotalPrice - coupon.discount)){ res.json({wallet: "noprice" }) return; } cartTotalPrice
    -=coupon.discount }else{ if(wallet.balance < cartTotalPrice){ res.json({wallet: "noprice" }) return; } } let
    balance=wallet.balance; const newBalance=balance - cartTotalPrice; const history={ type: "subtract" , amount:
    cartTotalPrice, newBalance: newBalance } wallet.balance=newBalance; wallet.history.push(history); await
    wallet.save(); newOrder.payment_status=true; } if(couponId){ const coupon=await couponModel.findOne({_id:
    couponId}); if(payment_id){ newOrder.price=cart.cartPrice - coupon.discount; newOrder.payment_status=true;
    newOrder.razorpay_order_id=payment_id; newOrder.coupon=coupon._id; }else{ newOrder.price=cart.cartPrice -
    coupon.discount; newOrder.coupon=coupon._id; } }else{ if(payment_id){ newOrder.payment_status=true;
    newOrder.razorpay_order_id=payment_id; } } const saveOrder=await newOrder.save() cart.items.forEach( async (item)=>{
    const product = await productModel.findOne({_id: item.productId});
    await productModel.updateMany({_id: item.productId},
    {$set: {quantity: product.quantity - item.quantity}})
    })


    await cartModel.deleteOne({userId: userId});

    res.json({response: true, orderId: saveOrder._id});

    } catch (error) {
    console.log(error);
    }

    }